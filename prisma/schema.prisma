generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id               String               @id @default(uuid())
  name             String
  lastname         String?
  email            String
  password         String
  role             String               @default("user")
  balance          Float?               @default(0.00)
  token            String?
  emailToken       String?
  updatableEmail   String?
  passToken        String?
  freezebalance    Float?               @default(0.00)
  cart             CartUserProducts[]
  createdCombo     Combo[]
  orders           Orders[]
  createdProducts  Products[]
  ModRecharges     Recharges[]          @relation("mod")
  userRecharges    Recharges[]          @relation("user")
  splitpay_session SplitPaySession?
  tickets          Tickets[]
  refoundsAsMod    UserRefoundBalance[] @relation("mod")
  refoundBalance   UserRefoundBalance[] @relation("user")
}

model Categories {
  id        String     @id @default(uuid())
  name      String
  productos Products[]
}

model Products {
  id          String             @id @default(uuid())
  name        String
  price       Float
  description String
  categorieID String
  seller_id   String
  stock       Int                @default(0)
  createadAt  DateTime           @default(now())
  usersCarts  CartUserProducts[]
  combo       ComboProducts[]
  images      ProductImages[]
  categorie   Categories         @relation(fields: [categorieID], references: [id], onDelete: Cascade)
  seller      Users              @relation(fields: [seller_id], references: [id])
  ticketsOn   Tickets[]
}

model ProductImages {
  id         String   @id @default(uuid())
  id_product String
  url        String
  public_id  String   @default("")
  product    Products @relation(fields: [id_product], references: [id], onDelete: Cascade)
}

model Combo {
  id               String             @id @default(uuid())
  name             String
  description      String
  price            Float
  id_seller        String
  stock            Int                @default(0)
  createadAt       DateTime           @default(now())
  CartUserProducts CartUserProducts[]
  seller           Users              @relation(fields: [id_seller], references: [id], onDelete: Cascade)
  products         ComboProducts[]
  ticketsOn        Tickets[]
}

model ComboProducts {
  id         String   @id @default(uuid())
  id_product String
  quantity   Int
  id_combo   String
  combo      Combo    @relation(fields: [id_combo], references: [id], onDelete: Cascade)
  product    Products @relation(fields: [id_product], references: [id], onDelete: Cascade)
}

model Recharges {
  id        String       @id @default(uuid())
  userID    String
  modID     String?
  balance   Float
  createdAt DateTime     @default(now())
  type      RechargeType @default(default)
  mod       Users?       @relation("mod", fields: [modID], references: [id], onDelete: Cascade)
  user      Users        @relation("user", fields: [userID], references: [id], onDelete: Cascade)
}

model CartUserProducts {
  id             String    @id @default(uuid())
  id_user        String
  id_product     String?
  quantity       Int
  id_combo       String?
  ticket_qr      String    @default(uuid())
  enableToBuy    Boolean   @default(true)
  ticket_enabled Boolean   @default(false)
  ticket_redeem  Boolean   @default(false)
  claimedAt      DateTime?
  createdAt      DateTime  @default(now())
  purchaseAt     DateTime?
  combo          Combo?    @relation(fields: [id_combo], references: [id], onDelete: Cascade)
  product        Products? @relation(fields: [id_product], references: [id], onDelete: Cascade)
  user           Users     @relation(fields: [id_user], references: [id], onDelete: Cascade)
}

model Tickets {
  id            String    @id @default(uuid())
  id_user       String
  id_product    String?
  id_combo      String?
  ticket_redeem Boolean   @default(false)
  claimedAt     DateTime?
  quantity      Int
  combo         Combo?    @relation(fields: [id_combo], references: [id], onDelete: Cascade)
  product       Products? @relation(fields: [id_product], references: [id], onDelete: Cascade)
  user          Users     @relation(fields: [id_user], references: [id], onDelete: Cascade)
}

model Orders {
  id             String           @id @default(uuid())
  id_user        String
  totalPrice     Float
  createdAt      DateTime         @default(now())
  user           Users            @relation(fields: [id_user], references: [id], onDelete: Cascade)
  ordersProducts OrdersProducts[]
}

model OrdersProducts {
  id            String @id @default(uuid())
  id_order      String
  product_name  String
  quantity      Int
  product_price Float
  order         Orders @relation(fields: [id_order], references: [id], onDelete: Cascade)
}

model UserRefoundBalance {
  id             String            @id @default(uuid())
  status         UserRefoundStatus @default(pending)
  refoundBalance Float
  reason         String
  id_user        String
  id_mod         String?
  checkedAt      DateTime?
  createdAt      DateTime          @default(now())
  mod            Users?            @relation("mod", fields: [id_mod], references: [id], onDelete: Cascade)
  user           Users             @relation("user", fields: [id_user], references: [id], onDelete: Cascade)
}

model SplitPay {
  id              String           @id @default(uuid())
  key             String
  name            String
  createdAt       DateTime         @default(now())
  status          SplitPayStatus   @default(not_configured)
  accesCode       String?
  splitPaySession SplitPaySession?
}

model SplitPaySession {
  id          String   @id @default(uuid())
  balance     Float
  id_user     String   @unique
  id_splitpay String   @unique
  splitpay    SplitPay @relation(fields: [id_splitpay], references: [id], onDelete: Cascade)
  user        Users    @relation(fields: [id_user], references: [id], onDelete: Cascade)
}

enum RechargeType {
  default
  splitpay
}

enum UserRefoundStatus {
  pending
  accepted
  denied
  canceled
}

enum SplitPayStatus {
  not_configured
  active
}
